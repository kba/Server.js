#!/usr/bin/env node
/*! @license Â©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

/** Standalone Linked Data Fragments Server */

var _ = require('lodash'),
    fs = require('fs'),
    path = require('path'),
    cluster = require('cluster'),
    LinkedDataFragmentsServer = require('../lib/LinkedDataFragmentsServer'),
    IndexDatasource = require('../lib/datasources/IndexDatasource'),
    ViewCollection = require('../lib/views/ViewCollection.js');

// Parse arguments
var args = process.argv.slice(2);
if (args.length < 1 || args.length > 3 || /^--?h(elp)?$/.test(args[0])) {
  console.log('usage: server config.json [port [workers]]');
  return process.exit(1);
}
var configDefaults = JSON.parse(fs.readFileSync(path.join(__dirname, '../config/config-defaults.json'))),
    config = _.defaults(JSON.parse(fs.readFileSync(args[0])), configDefaults),
    port = parseInt(args[1], 10) || config.port,
    workers = parseInt(args[2], 10) || config.workers,
    constructors = {};

// Start up a cluster master
if (cluster.isMaster) {
  // Create workers
  console.log('Master %d running on http://localhost:%d/.', process.pid, port);
  for (var i = 0; i < workers; i++)
    cluster.fork();

  // Respawn crashed workers
  cluster.on('listening', function (worker) {
    worker.once('exit', function (code, signal) {
      if (!worker.suicide) {
        console.log('Worker %d died with %s. Starting new worker.',
                    worker.process.pid, code || signal);
        cluster.fork();
      }
    });
  });

  // Respawn workers one by one when receiving a SIGHUP signal
  process.on('SIGHUP', function respawn() {
    console.log('Respawning workers of master %d.', process.pid);
    process.addListener('SIGHUP', respawnPending);
    process.removeListener('SIGHUP', respawn);

    // Retrieve a list of old workers that will be replaced by new ones
    var workers = Object.keys(cluster.workers).map(function (id) { return cluster.workers[id]; });
    (function respawnNext() {
      // If there are still old workers, respawn a new one
      if (workers.length) {
        // Wait until the new worker starts listening to kill the old one
        var newWorker = cluster.fork();
        newWorker.once('listening', function () {
          var worker = workers.pop();
          if (!worker)
            return newWorker.kill(), respawnNext(); // Dead workers are replaced automatically
          worker.once('exit', function () {
            console.log('Worker %d replaces killed worker %d.',
                        newWorker.process.pid, worker.process.pid);
            respawnNext();
          });
          worker.kill();
          newWorker.removeListener('exit', abort);
        });
        // Abort the respawning process if creating a new worker fails
        newWorker.on('exit', abort);
        function abort(code, signal) {
          if (!newWorker.suicide) {
            console.log('Respawning aborted because worker %d died with %s.',
                        newWorker.process.pid, code || signal);
            process.addListener('SIGHUP', respawn);
            process.removeListener('SIGHUP', respawnPending);
          }
        }
      }
      // No old workers left, so respawning has finished
      else {
        process.addListener('SIGHUP', respawn);
        process.removeListener('SIGHUP', respawnPending);
        console.log('Respawned all workers of master %d.', process.pid);
      }
    })();
    function respawnPending() { console.log('Respawning already in progress'); }
  });
}
// Start up a worker
else {
  // Configure preset URLs
  var baseURL = config.baseURL = config.baseURL.replace(/\/?$/, '/'),
      baseURLRoot = baseURL.match(/^(?:https?:\/\/[^\/]+)?/)[0],
      baseURLPath = baseURL.substr(baseURLRoot.length),
      blankNodePath = baseURLRoot ? '/.well-known/genid/' : '',
      blankNodePrefix = blankNodePath ? baseURLRoot + blankNodePath : 'genid:';

  // Create all data sources
  var datasources = config.datasources, datasourceBase = baseURLPath.substr(1), dereference = config.dereference;
  Object.keys(datasources).forEach(function (datasourceName) {
    var datasourceConfig = config.datasources[datasourceName];
    delete datasources[datasourceName];
    if (datasourceConfig.enabled !== false) {
      try {
        // Avoid illegal URI characters in data source path
        var datasourcePath = datasourceBase + encodeURI(datasourceName);
        datasources[datasourcePath] = datasourceConfig;
        // Set up blank-node-to-IRI translation, with dereferenceable URLs when possible
        datasourceConfig.settings = _.defaults(datasourceConfig.settings || {}, config);
        if (!datasourceConfig.settings.blankNodePrefix) {
          datasourceConfig.settings.blankNodePrefix = blankNodePrefix + datasourcePath + '/';
          if (blankNodePath)
            dereference[blankNodePath + datasourcePath + '/'] = datasourcePath;
        }
        // Create the data source
        var datasource = instantiate(datasourceConfig, '../lib/datasources/');
        datasource.on('error', datasourceError);
        datasourceConfig.datasource = datasource;
        datasourceConfig.url = baseURLRoot + '/' + datasourcePath + '#dataset';
        datasourceConfig.title = datasourceConfig.title || datasourceName;
      }
      catch (error) { datasourceError(error); }
      function datasourceError(error) {
        delete datasources[datasourcePath];
        process.stderr.write('Could not load datasource ' + datasourceName + ': ' + error.message + '\n');
        process.stderr.write(error.stack);
      }
    }
  });

  // Create index data source
  var indexPath = datasourceBase.replace(/\/$/, '');
  datasources[indexPath] = datasources[indexPath] || {
    url: baseURLRoot + '/' + indexPath + '#dataset',
    role: 'index',
    title: 'dataset index',
    datasource: new IndexDatasource({ datasources: datasources }),
  };

  // Set up assets
  config.assetsPath = (config.assetsPath || baseURLPath + 'assets/');

  // Set up routers, views, and controllers
  config.routers = instantiateAll(config.routers,  '../lib/routers/');
  config.views = new ViewCollection();
  config.views.addViews(instantiateAll(findFiles('../lib/views', /\.js$/)));
  config.controllers = instantiateAll(config.controllers, '../lib/controllers/');

  // Set up access logging
  var loggingSettings = _.defaults(config.logging, configDefaults.logging);
  if (loggingSettings.enabled) {
    var accesslog = require('access-log');
    config.accesslogger = function (request, response) {
      accesslog(request, response, null, function (logEntry) {
        fs.appendFile(loggingSettings.file, logEntry + '\n', function (error) {
          error && process.stderr.write('Error when writing to access log file: ' + error);
        });
      });
    };
  }

  // Create and start server
  var server = new LinkedDataFragmentsServer(config);
  server.listen(port);
  console.log('Worker %d running on http://localhost:%d/.', process.pid, port);

  // Terminate gracefully if possible
  process.once('SIGINT', function () {
    console.log('Stopping worker', process.pid);
    server.stop();
    process.on('SIGINT', function () { process.exit(1); });
  });
}


// Instantiates an object from the given description
function instantiate(description, includePath) {
  var absolutePath = includePath ? path.resolve(__dirname, includePath) : '',
      type = path.join(absolutePath, description.type || description),
      Constructor = constructors[type];
  if (!Constructor)
    Constructor = constructors[type] = require(type);
  return new Constructor(_.defaults(description.settings || {}, config));
}

// Instantiates all objects from the given descriptions
function instantiateAll(descriptions, includePath) {
  return (_.isArray(descriptions) ? _.map : _.mapValues)
         (descriptions, function (description) { return instantiate(description, includePath); });
}

// Recursively finds files in a folder whose name matches the pattern
function findFiles(folder, pattern, includeCurrentFolder) {
  folder = path.resolve(__dirname, folder);
  return _.flatten(_.compact(fs.readdirSync(folder).map(function (name) {
    name = path.join(folder, name);
    if (fs.statSync(name).isDirectory())
      return findFiles(name, pattern, true);
    else if (includeCurrentFolder && pattern.test(name))
      return name;
  })));
}
